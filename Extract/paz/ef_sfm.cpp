#include "StdAfx.h"
#include "ef_sfm.h"

/// Check if files are supported
///
/// @param archive Archive
///
bool CEFsfm::IsSupported(CArcFile* archive) const
{
	return memcmp(archive->GetHed(), "ef_sfm", 6) == 0;
}

/// Mount
///
/// @param archive Archive
///
bool CEFsfm::Mount(CArcFile* archive)
{
	if (!IsSupported(archive))
		return false;

	// Skip 32 bytes
	archive->SeekHed(32);

	return CPaz::Mount(archive);
}

/// Decode
///
/// @param archive Archive
///
bool CEFsfm::Decode(CArcFile* archive)
{
	if (!IsSupported(archive))
		return false;

	return CPaz::Decode(archive);
}

/// Initialize Mount Key
///
/// @param archive Archive
///
void CEFsfm::InitMountKey(CArcFile* archive)
{
	static const SKeyInfo key_info[] =
	{
		{ _T("scr"),    "\xA3\x5C\xF8\x00\x38\x16\xBD\x7D\x1E\x59\x57\x02\xED\xE4\x07\x08\x21\x45\x76\x38\xF9\x04\x66\x8C\xA9\xCD\x15\x4B\xF8\xDC\x34\xAC" },
		{ _T("bg"),     "\xB6\xA8\xCE\x49\x40\x08\x93\xC1\x32\xD3\xCF\x45\xE2\xF4\xA3\xD3\x11\x46\xF0\x26\xA2\x8F\x99\xDD\x43\x04\x02\x96\xBD\x51\xBC\xDA" },
		{ _T("st"),     "\x45\x8E\xF4\x24\xF9\x12\x06\xCD\xA7\x70\xBD\xD7\xE0\x31\x81\x3E\x52\x37\xD1\x0B\x4F\xA1\xEC\xD1\x88\x09\xBC\xE2\x5A\xB1\x78\xAE" },
		{ _T("sys"),    "\x82\x9F\x2A\x25\x8A\xC3\x2A\x5E\x45\x79\x0C\x64\x13\x01\x60\xC4\x40\xA2\x2A\xE5\xFE\xFC\xE1\x6E\xCA\x5A\x78\x14\x22\xC6\x58\x72" },
		{ _T("bgm"),    "\x35\xD1\x71\x3D\x4B\xB2\x85\xE3\x5C\x9C\x94\xB4\xAE\xCD\xF0\x10\x9B\x58\x60\x9C\x8F\xE4\xEA\xE4\x40\x66\xE5\x46\xA2\x3B\x5A\x62" },
		{ _T("voice"),  "\xB3\xE1\x49\xF6\xE4\xB8\xA1\xEF\xD4\xCB\x26\x1B\x1C\x4E\x67\xC5\x81\x94\x23\x5F\x8B\x20\xAE\xFC\x32\x54\x31\x60\x8A\x86\x78\x7A" },
		{ _T("se"),     "\x7A\x98\x10\x48\x84\xBD\x1C\x10\xFD\xD8\x97\xDB\x2F\x76\xE2\xBB\xB4\xB0\xD6\xC9\x14\xCE\x83\x15\xE8\xD3\x55\xD3\x52\xE7\x13\xB0" },
		{ _T("mov"),    "\xB3\x25\x8D\x86\x56\xFF\x2F\x27\xA4\x93\xB1\x4B\x97\xB9\xFB\x99\x94\x4B\xDA\x46\xF6\xB4\xCF\xC8\x15\x74\x21\x50\xE3\x76\x55\x79" }
	};

	SetKey(archive, key_info);
}

/// Initialize Decode Key
///
/// @param archive Archive
///
void CEFsfm::InitDecodeKey(CArcFile* archive)
{
	static const SKeyInfo key_info[] =
	{
		{ _T("scr"),    "\x3A\x75\xBD\x84\x3F\xC8\x08\x98\xF4\x41\x72\xF1\xD5\x1A\x2C\xFA\xFE\x1A\x2D\xBA\xC7\xF6\x2E\xB0\xF2\xBD\x12\xE4\x0F\x65\x16\xC1" },
		{ _T("bg"),     "\x24\x2F\x87\xDB\x7C\xA3\x78\x5B\x60\xF6\xC6\xC2\xB0\x84\x1E\xC0\xBC\xF6\xDA\x17\x1F\xE8\x39\xD4\xB7\xDA\x13\xED\x4A\x15\xA3\x30" },
		{ _T("st"),     "\xFA\x22\x72\x09\x13\x10\xC5\xE6\xB1\x60\xB3\x5C\xDE\x00\xAE\x80\xE2\xA5\x13\xFA\x76\x0B\xDD\xE1\xF2\x60\x14\x62\x93\xF3\x4E\x20" },
		{ _T("sys"),    "\x15\x7D\xDF\x83\x5F\x0C\x20\xCA\xB6\x29\x30\xEF\x7A\xF4\xF0\x1A\x84\xAA\x67\xB7\x2E\xD1\x5A\x21\x32\x6A\x55\xBB\xF4\x3A\xE8\xA3" },
		{ _T("bgm"),    "\x04\x13\x52\x26\x08\xF1\xD1\xC2\x61\xB5\x79\x10\xAD\x4C\x9D\x66\xC5\x77\x78\xFA\x45\x19\x89\x97\x2F\x34\x6C\x53\xD0\xFD\xBE\x2B" },
		{ _T("voice"),  "\xEF\x95\x16\x79\xFD\x00\xCA\x22\x50\xED\x04\x75\xA2\xD5\xEB\x69\x69\xE1\xB6\x4D\xDD\xFC\xA7\x24\x9D\x0D\x4E\xFC\xBE\x12\x5B\x76" },
		{ _T("se"),     "\x77\xE3\xE8\xFF\x18\xF1\x82\xC5\x2E\x77\x3A\x0D\x89\xD1\x73\x86\x93\x04\x6C\x17\x5A\x24\xFA\xC9\xBF\xFF\xD2\xE4\x58\xA1\x6D\xAB" },
		{ _T("mov"),    "\x2A\xCA\x1A\x43\xC0\x38\x86\xA1\x42\x9E\x65\xAC\xEB\x67\x38\x1A\x2A\x9F\x5F\xF5\x68\x9A\xB3\xC5\xF9\x24\xF2\xBB\x16\x09\xF1\xD2" }
	};

	SetKey(archive, key_info);

	m_movie_table_id = 0;
}

/// Initialize Movie Table
///
/// @param table Table
///
u32 CEFsfm::InitMovieTable(const u8* table)
{
	for (size_t i = 0; i < 256; i++)
	{
		for (size_t j = 0; j < 256; j++)
		{
			m_movie_table[i][*table++] = static_cast<u8>(j);
		}
	}

	return 65536;
}

/// Decode Movie Data
///
/// @param target - Data to be decoded
/// @param size   - Decoding size
///
void CEFsfm::DecodeMovieData(u8* target, size_t size)
{
	for (size_t i = 0; i < size; i++)
	{
		target[i] = m_movie_table[m_movie_table_id][target[i]];
	}

	m_movie_table_id = (m_movie_table_id + 1) & 0xFF;
}

/// Get Movie Buffer Size
///
/// @param archive - Archive
///
size_t CEFsfm::GetMovieBufSize(CArcFile* archive)
{
	return 65536;
}
